stages:
  - build compiler
  - build
  - test


# Template for Linux builds
.linux: &linux
  before_script:
    - 'AVAILABLE_CPU_CORES=$(( $(nproc) > 6 ? 6 : $(nproc) ))'
  tags:
    - saas-linux-medium-amd64

# Template for multiarch execution by QEMU and binfmt_misc
#.setup_multiarch:
#  services:
#    - docker:24.0-dind # necessary for docker run
#  script:
#    # script to register binfmt_misc entries and the static qemu binary files
#    - docker run --rm --privileged multiarch/qemu-user-static --reset --persistent yes

# Template for Alpine Linux builds
.alpine_linux: &alpine_linux_configuration
  <<: *linux
  image: freepascal/fpc:3.2.2-minimal

# Template for Debian builds
.debian_linux: &debian_linux_configuration
  <<: *linux
  image: freepascal/fpc:3.2.2-buster-full

# Template for Ubuntu builds
.ubuntu_linux: &ubuntu_linux_configuration
  <<: *linux
  image: freepascal/fpc:3.2.2-focal-full


# Templates for compiling compiler
.full_cycle_of_compiler: &full_cycle_of_compiler
  stage: build compiler
  script:
    - cd compiler
    - make fullcycle -j $AVAILABLE_CPU_CORES "OPT=-Oodfa"

# Templates for creating installation
.creating_full_x86_64_installation: &creating_full_x86_64_installation
  stage: build
  script:
    - make -j $AVAILABLE_CPU_CORES zipinstall OS_TARGET=linux CPU_TARGET=x86_64 FPMAKEOPT="-T $AVAILABLE_CPU_CORES" "OPT=-Oodfa"
  artifacts:
    when: on_success
    expire_in: 5 days
    paths:
      - fpc-*.tar.gz

# Templates for running tests
.run_tests: &run_tests
  stage: test
  script:
    # extract installer from previous stage
    - tar -xzf fpc-*.tar.gz
    - FPC_SRC=$(pwd)
    - FPC_COMPILER=$(find $FPC_SRC/lib/fpc/ -name ppc*)
    # run tests
    - cd tests
    - make clean -j $AVAILABLE_CPU_CORES TEST_FPC=$FPC_COMPILER TEST_DELTEMP=1
    - make full -j $AVAILABLE_CPU_CORES TEST_FPC=$FPC_COMPILER TEST_DELTEMP=1
    # generate junit test report
    - cd utils
    - make fpts2junit
    - cd $FPC_SRC
    - tests/utils/fpts2junit $FPC_SRC/tests/output/x86_64-linux/ testresult.xml
  artifacts:
    when: always  
    paths:
      - testresult.xml
    reports:
      junit: testresult.xml


Full Cycle of x86_64 Compiler on Alpine Linux:
  <<: [*full_cycle_of_compiler, *alpine_linux_configuration]

Full Cycle of x86_64 Compiler on Debian Linux:
  <<: [*full_cycle_of_compiler, *debian_linux_configuration]

Full Cycle of x86_64 Compiler on Ubuntu Linux:
  <<: [*full_cycle_of_compiler, *ubuntu_linux_configuration]


Build FPC x86_64 on Debian Linux:
  <<: [*creating_full_x86_64_installation, *debian_linux_configuration]

Build FPC x86_64 on Ubuntu Linux:
  <<: [*creating_full_x86_64_installation, *ubuntu_linux_configuration]


Run FPC x86_64 Tests on Debian Linux:
  <<: [*run_tests, *debian_linux_configuration]

Run FPC x86_64 Tests on Ubuntu Linux:
  <<: [*run_tests, *ubuntu_linux_configuration]
