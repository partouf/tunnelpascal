stages:
  - build compiler
  - build
  - test

# Template for Linux builds
.linux: &linux
  before_script:
    - AVAILABLE_CPU_CORES=$(nproc)
  tags:
    - saas-linux-large-amd64

# Template for Alpine Linux builds
.alpine_linux: &alpine_linux_configuration
  <<: *linux
  image: freepascal/fpc:3.2.2-minimal

# Template for Ubuntu builds
.ubuntu_linux: &ubuntu_linux_configuration
  <<: *linux
  image: freepascal/fpc:3.2.2-focal-full


# Templates for compiling
.full_cycle_of_compiler: &full_cycle_of_compiler
  stage: build compiler
  script:
    - cd compiler
    - make fullcycle -j $AVAILABLE_CPU_CORES "OPT=-Oodfa"




Full Cycle of Compiler on Alpine Linux:
  <<: *full_cycle_of_compiler
  <<: *alpine_linux_configuration


Full Cycle of Compiler on Ubuntu Linux:
  <<: *full_cycle_of_compiler
  <<: *ubuntu_linux_configuration


Build FPC on Ubuntu Linux:
  stage: build
  <<: *ubuntu_linux_configuration
  script:
    - make -j $AVAILABLE_CPU_CORES zipinstall OS_TARGET=linux CPU_TARGET=x86_64 FPMAKEOPT="-T $AVAILABLE_CPU_CORES" "OPT=-Oodfa"
  artifacts:
    when: on_success
    expire_in: 5 days
    paths:
      - fpc-*.tar.gz


Run FPC Tests on Ubuntu Linux:
  stage: test
  <<: *ubuntu_linux_configuration
  script:
    # extract installer from previous stage
    - tar -xzf fpc-*.tar.gz
    - FPC_SRC=$(pwd)
    - FPC_COMPILER=$FPC_SRC/lib/fpc/3.3.1/ppcx64
    # run tests
    - cd tests
    - make clean -j $AVAILABLE_CPU_CORES TEST_FPC=$FPC_COMPILER TEST_DELTEMP=1
    - make full -j $AVAILABLE_CPU_CORES TEST_FPC=$FPC_COMPILER TEST_DELTEMP=1
    # generate junit test report
    - cd utils
    - make fpts2junit
    - cd $FPC_SRC
    - tests/utils/fpts2junit $FPC_SRC/tests/output/x86_64-linux/ testresult.xml
  artifacts:
    when: always  
    paths:
      - testresult.xml
    reports:
      junit: testresult.xml
